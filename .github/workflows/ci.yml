name: CI - .NET with SonarCloud Analysis

on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
      - main
    paths:
        - '*.cs'
        - '*.csproj'
        - '*.ps1'
        - '*.sln'
        - 'src/**'
        - 'tests/**'
        - 'config/**'
        - 'deploy/**'
        - 'publish/**'
        - 'scripts/**'
        - '*/docker-compose.local.yml'
        - '*/docker-compose.yml'

# Security: Explicit permissions for CodeQL compliance
permissions:
  contents: read          # Read repository contents
  actions: read          # Read workflow run information  
  checks: write          # Write check results
  pull-requests: write   # Comment on PRs with analysis results
  security-events: write # Write security analysis results

jobs:
  sonarcloud:
    name: Build, Test & SonarCloud Analysis
    runs-on: windows-latest
    permissions:
      contents: read          # Read source code
      checks: write          # Write test results and checks
      pull-requests: write   # Comment on PRs
      security-events: write # Upload security analysis results

    steps:
      # ===== SETUP =====

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Required for SonarCloud

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clones for better analysis relevancy

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # ===== CACHE =====
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ~\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ===== INSTALL TOOLS =====
      - name: Install SonarCloud scanner for .NET
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          $scannerDir = Join-Path $env:USERPROFILE ".sonar\scanner"
          New-Item -Path $scannerDir -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path $scannerDir

      - name: Install dotnet-coverage
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage

      # ===== BUILD PREPARATION =====
      - name: Create basic structure if missing
        shell: powershell
        run: |
          if (!(Test-Path "CSVTransferApp.sln")) {
              Write-Output "Creating basic solution structure..."
              dotnet new sln -n CSVTransferApp
              
              # Create minimal console app for CI
              New-Item -ItemType Directory -Path "src\CSVTransferApp.Console" -Force
              dotnet new console -n CSVTransferApp.Console -o src\CSVTransferApp.Console --framework net9.0
              dotnet sln add src\CSVTransferApp.Console\CSVTransferApp.Console.csproj
              
              Write-Output "‚úÖ Basic structure created for CI"
          } else {
              Write-Output "‚úÖ Solution file exists"
          }

      # ===== SONAR ANALYSIS + BUILD + TEST =====
      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Remove sonar-project.properties file if it exists
          if (Test-Path "sonar-project.properties") {
              Remove-Item "sonar-project.properties" -Force
              Write-Host "Removed sonar-project.properties file"
          }
          
          $scannerDir = Join-Path $env:USERPROFILE ".sonar\scanner"
          $scannerPath = Join-Path $scannerDir "dotnet-sonarscanner"
          Write-Host "Using scanner at: $scannerPath"
          & $scannerPath begin /k:"Akr0n_CSVTransferApp" /o:"akr0n" /d:sonar.token="$env:SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" /d:sonar.coverage.exclusions="**/Program.cs,**/GlobalUsings.cs,**/*Tests/**,**/Migrations/**" /d:sonar.exclusions="**/bin/**,**/obj/**,**/logs/**,**/publish/**,**/deploy/**"

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests with coverage
        shell: powershell
        run: |
          # Verifica che la solution contenga progetti di test
          Write-Output "üîç Checking for test projects in solution..."
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*Tests.csproj"
          
          if ($testProjects.Count -gt 0) {
              Write-Output "‚úÖ Found $($testProjects.Count) test project(s):"
              foreach ($project in $testProjects) {
                  Write-Output "  - $($project.Name)"
              }
              
              # Esegui test con coverage - specificando la solution per includere tutti i progetti
              Write-Output "üß™ Running tests with coverage collection..."
              dotnet-coverage collect "dotnet test CSVTransferApp.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults --collect:`"XPlat Code Coverage`"" -f xml -o "coverage.opencover.xml"
              
              # Verifica che il file di coverage sia stato creato
              if (Test-Path "coverage.opencover.xml") {
                  $fileSize = (Get-Item "coverage.opencover.xml").Length
                  Write-Output "‚úÖ Coverage file created successfully (Size: $fileSize bytes)"
              } else {
                  Write-Output "‚ö†Ô∏è Coverage file not found, creating empty one"
              }
              
              Write-Output "‚úÖ Tests completed with coverage"
          } else {
              Write-Output "‚ö†Ô∏è No test projects found, creating dummy coverage file"
              
              @'
          <?xml version="1.0" encoding="utf-8"?>
          <CoverageSession>
            <Summary numSequencePoints="0" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="0" minCyclomaticComplexity="0" />
            <Modules>
            </Modules>
          </CoverageSession>
          '@ | Set-Content -Path "coverage.opencover.xml"
          }

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          $scannerDir = Join-Path $env:USERPROFILE ".sonar\scanner"
          $scannerPath = Join-Path $scannerDir "dotnet-sonarscanner"
          Write-Host "Using scanner at: $scannerPath"
          & $scannerPath end /d:sonar.token="$env:SONAR_TOKEN"

      # ===== UPLOAD ARTIFACTS =====
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ runner.os }}
          path: |
            TestResults/*.trx
            coverage.opencover.xml
          retention-days: 30

      # ===== BUILD SUMMARY =====
      - name: Generate build summary
        if: always()
        shell: powershell
        run: |
          $summary = @"
          ## SonarCloud Analysis Results

          ### Analysis Information:
          - **Project**: ${{ github.repository }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}

          **[View Results on SonarCloud](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})**
          "@
          $summary | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8

  # ===== JOB PARALLELO PER LINUX =====
  build-linux:
    name: Build Test (Linux)
    runs-on: ubuntu-latest
    permissions:
      contents: read          # Read source code only
      checks: write          # Write test results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal
