name: CI - .NET with SonarCloud Analysis

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  sonarcloud:
    name: Build, Test & SonarCloud Analysis
    runs-on: windows-latest

    steps:
      # ===== SETUP =====
      - name: Check SONAR_TOKEN
        shell: powershell
        run: |
          $token = '${{ secrets.SONAR_TOKEN }}'
          if ([string]::IsNullOrEmpty($token)) {
              Write-Error @"
              SONAR_TOKEN is not configured in your repository secrets.
              
              Please follow these steps to configure it:
              1. Go to your repository settings
              2. Navigate to Secrets and variables > Actions
              3. Click 'New repository secret'
              4. Name: SONAR_TOKEN
              5. Value: Your SonarCloud token from SonarCloud.io
              
              For more information, see: https://docs.github.com/en/actions/security-guides/encrypted-secrets
              "@
              exit 1
          }
          Write-Host "SONAR_TOKEN is configured correctly"
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Required for SonarCloud

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clones for better analysis relevancy

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # ===== CACHE =====
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ===== INSTALL TOOLS =====
      - name: Install SonarCloud scanner for .NET
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install dotnet-coverage
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage

      # ===== BUILD PREPARATION =====
      - name: Create basic structure if missing
        shell: powershell
        run: |
          if (!(Test-Path "CSVTransferApp.sln")) {
              Write-Output "Creating basic solution structure..."
              dotnet new sln -n CSVTransferApp
              
              # Create minimal console app for CI
              New-Item -ItemType Directory -Path "src\CSVTransferApp.Console" -Force
              dotnet new console -n CSVTransferApp.Console -o src\CSVTransferApp.Console --framework net9.0
              dotnet sln add src\CSVTransferApp.Console\CSVTransferApp.Console.csproj
              
              Write-Output "✅ Basic structure created for CI"
          } else {
              Write-Output "✅ Solution file exists"
          }

      # ===== SONAR ANALYSIS + BUILD + TEST =====
      - name: Debug Environment Variables
        shell: powershell
        run: |
          Write-Host "=== Debug Environment Variables ==="
          Write-Host "Repository Owner: ${{ github.repository_owner }}"
          Write-Host "Repository Name: ${{ github.event.repository.name }}"
          if ($env:SONAR_TOKEN) { 
              Write-Host "[OK] SONAR_TOKEN is set"
              Write-Host "Token length: $($env:SONAR_TOKEN.Length) characters"
          } else { 
              Write-Host "[ERROR] SONAR_TOKEN is NOT set"
          }
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Verify SonarCloud Configuration
        shell: powershell
        run: |
          Write-Host "=== Verifying SonarCloud Configuration ==="
          Write-Host "Project Key: ${{ github.repository_owner }}_${{ github.event.repository.name }}"
          Write-Host "Organization: ${{ github.repository_owner }}"

      - name: Begin SonarCloud analysis
        shell: powershell
        run: |
          $sonarToken = '${{ secrets.SONAR_TOKEN }}'
          if ([string]::IsNullOrEmpty($sonarToken)) {
              Write-Error "SONAR_TOKEN is not set. Please configure it in your repository secrets."
              exit 1
          }
          
          Write-Host "Starting SonarCloud Analysis..."
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"${{ github.repository_owner }}_${{ github.event.repository.name }}" `
            /o:"${{ github.repository_owner }}" `
            /d:sonar.login="$sonarToken" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/logs/**,**/temp/**,**/*.Designer.cs" `
            /d:sonar.coverage.exclusions="**/Tests/**,**/TestData/**,**/Mocks/**" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests with coverage
        shell: powershell
        run: |
          # Cerca progetti di test
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*Tests.csproj"
          
          if ($testProjects.Count -gt 0) {
              Write-Output "Found $($testProjects.Count) test project(s)"
              
              # Esegui test con coverage
              dotnet-coverage collect "dotnet test --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults" -f xml -o "coverage.opencover.xml"
              
              Write-Output "✅ Tests completed with coverage"
          } else {
              Write-Output "⚠️ No test projects found, creating dummy coverage file"
              
              # Crea file coverage vuoto per SonarCloud
              $coverageXml = @"
          <?xml version="1.0" encoding="utf-8"?>
          <CoverageSession>
            <Summary numSequencePoints="0" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="0" minCyclomaticComplexity="0" />
            <Modules>
            </Modules>
          </CoverageSession>
          "@
              Set-Content -Path "coverage.opencover.xml" -Value $coverageXml
          }

      - name: End SonarCloud analysis
        shell: powershell
        run: |
          $sonarToken = '${{ secrets.SONAR_TOKEN }}'
          if ([string]::IsNullOrEmpty($sonarToken)) {
              Write-Error "SONAR_TOKEN is not set. Please configure it in your repository secrets."
              exit 1
          }
          
          Write-Host "Completing SonarCloud Analysis..."
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="$sonarToken"

      # ===== UPLOAD ARTIFACTS =====
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ runner.os }}
          path: |
            TestResults/*.trx
            coverage.opencover.xml
          retention-days: 30

      # ===== BUILD SUMMARY =====
      - name: Generate build summary
        if: always()
        shell: powershell
        run: |
          $summary = @"
          ## SonarCloud Analysis Results

          ### Analysis Information:
          - **Project**: ${{ github.repository }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}

          **[View Results on SonarCloud](https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }})**
          "@
          $summary | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8

  # ===== JOB PARALLELO PER LINUX (opzionale) =====
  build-linux:
    name: Build Test (Linux)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal
