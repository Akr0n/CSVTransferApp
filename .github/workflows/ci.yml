name: CI - .NET Build & Test

on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
      - main
    paths:
        - '*.cs'
        - '*.csproj'
        - '*.ps1'
        - '*.sln'
        - 'src/**'
        - 'tests/**'
        - 'config/**'
        - 'deploy/**'
        - 'publish/**'
        - 'scripts/**'
        - '*/docker-compose.local.yml'
        - '*/docker-compose.yml'

# Security: Explicit permissions for CodeQL compliance
permissions:
  contents: read          # Read repository contents
  actions: read          # Read workflow run information  
  checks: write          # Write check results
  pull-requests: write   # Comment on PRs with analysis results
  security-events: write # Write security analysis results

jobs:
  build:
    name: Build & Test
    runs-on: windows-latest
    permissions:
      contents: read          # Read source code
      checks: write          # Write test results and checks
      pull-requests: write   # Comment on PRs
      security-events: write # Upload security analysis results

    steps:
      # ===== SETUP =====

      

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Disable shallow clones for better analysis relevancy

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # ===== CACHE =====

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # ===== INSTALL TOOLS =====

      - name: Install dotnet-coverage
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage

      # ===== BUILD PREPARATION =====
      - name: Create basic structure if missing
        shell: powershell
        run: |
          if (!(Test-Path "CSVTransferApp.sln")) {
              Write-Output "Creating basic solution structure..."
              dotnet new sln -n CSVTransferApp
              
              # Create minimal console app for CI
              New-Item -ItemType Directory -Path "src\CSVTransferApp.Console" -Force
              dotnet new console -n CSVTransferApp.Console -o src\CSVTransferApp.Console --framework net9.0
              dotnet sln add src\CSVTransferApp.Console\CSVTransferApp.Console.csproj
              
              Write-Output "Basic structure created for CI"
          } else {
              Write-Output "Solution file exists"
          }

      # ===== BUILD + TEST =====

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests with coverage
        shell: powershell
        run: |
          # Verifica che la solution contenga progetti di test
          Write-Output "Checking for test projects in solution..."
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*Tests.csproj"
          
          if ($testProjects.Count -gt 0) {
              Write-Output "Found $($testProjects.Count) test project(s):"
              foreach ($project in $testProjects) {
                  Write-Output "  - $($project.Name)"
              }
              
              # Esegui test con coverage - specificando la solution per includere tutti i progetti
              Write-Output "Running tests with coverage collection..."
              dotnet-coverage collect "dotnet test CSVTransferApp.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults" -f xml -o "coverage.opencover.xml"
              
              # Verifica che il file di coverage sia stato creato
              if (Test-Path "coverage.opencover.xml") {
                  $fileSize = (Get-Item "coverage.opencover.xml").Length
                  Write-Output "Coverage file created successfully (Size: $fileSize bytes)"
              } else {
                  Write-Output "WARNING: Coverage file not found, creating empty one"
                  
                  # Build a minimal OpenCover document via XmlDocument to avoid quoting issues in YAML/PowerShell
                  $coverage = New-Object System.Xml.XmlDocument
                  $declaration = $coverage.CreateXmlDeclaration('1.0', 'utf-8', $null)
                  $coverage.AppendChild($declaration) | Out-Null

                  $session = $coverage.CreateElement('CoverageSession')
                  $coverage.AppendChild($session) | Out-Null

                  $summary = $coverage.CreateElement('Summary')
                  $summary.SetAttribute('numSequencePoints', '0')
                  $summary.SetAttribute('visitedSequencePoints', '0')
                  $summary.SetAttribute('numBranchPoints', '0')
                  $summary.SetAttribute('visitedBranchPoints', '0')
                  $summary.SetAttribute('sequenceCoverage', '0')
                  $summary.SetAttribute('branchCoverage', '0')
                  $summary.SetAttribute('maxCyclomaticComplexity', '0')
                  $summary.SetAttribute('minCyclomaticComplexity', '0')
                  $session.AppendChild($summary) | Out-Null

                  $modules = $coverage.CreateElement('Modules')
                  $session.AppendChild($modules) | Out-Null

                  $coverage.Save((Join-Path $PWD 'coverage.opencover.xml'))
              }
              
              Write-Output "Tests completed with coverage"
          } else {
              Write-Output "WARNING: No test projects found, creating dummy coverage file"

              # Build a minimal OpenCover document via XmlDocument to avoid quoting issues in YAML/PowerShell
              $coverage = New-Object System.Xml.XmlDocument
              $declaration = $coverage.CreateXmlDeclaration('1.0', 'utf-8', $null)
              $coverage.AppendChild($declaration) | Out-Null

              $session = $coverage.CreateElement('CoverageSession')
              $coverage.AppendChild($session) | Out-Null

              $summary = $coverage.CreateElement('Summary')
              $summary.SetAttribute('numSequencePoints', '0')
              $summary.SetAttribute('visitedSequencePoints', '0')
              $summary.SetAttribute('numBranchPoints', '0')
              $summary.SetAttribute('visitedBranchPoints', '0')
              $summary.SetAttribute('sequenceCoverage', '0')
              $summary.SetAttribute('branchCoverage', '0')
              $summary.SetAttribute('maxCyclomaticComplexity', '0')
              $summary.SetAttribute('minCyclomaticComplexity', '0')
              $session.AppendChild($summary) | Out-Null

              $modules = $coverage.CreateElement('Modules')
              $session.AppendChild($modules) | Out-Null

              $coverage.Save((Join-Path $PWD 'coverage.opencover.xml'))
          }


      # ===== UPLOAD ARTIFACTS =====
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ runner.os }}
          path: |
            TestResults/*.trx
          retention-days: 30

      # ===== BUILD SUMMARY =====
      - name: Generate build summary
        if: always()
        shell: powershell
        run: |
          Write-Output "## Build & Test Summary" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          Write-Output "" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          Write-Output "- Project: $env:GITHUB_REPOSITORY" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          Write-Output "- Branch: $env:GITHUB_REF_NAME" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          Write-Output "- Commit: $env:GITHUB_SHA" | Out-File -Append -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8

  # ===== JOB PARALLELO PER LINUX =====
  build-linux:
    name: Build Test (Linux)
    runs-on: ubuntu-latest
    permissions:
      contents: read          # Read source code only
      checks: write          # Write test results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore --verbosity normal

      - name: Build solution
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal
