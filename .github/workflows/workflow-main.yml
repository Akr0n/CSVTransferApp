name: PROD - Build & Release .NET CSV Transfer App

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - '.editorconfig'
  push:
    tags:
      - 'v*'

# Security: Explicit permissions for CodeQL compliance
permissions:
  contents: write
  pull-requests: read
  actions: write

jobs:
  prepare-release:
    name: Prepare tag and release context
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      pull-requests: read
    outputs:
      tag: ${{ steps.set_tag_pr.outputs.tag || steps.set_tag_tagref.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Compute and push production tag (PR merge to main)
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
        id: set_tag_pr
        shell: pwsh
        run: |
          git fetch --tags
          $all_tags = git tag --list
          $dev_tags = @()
          foreach ($tag in $all_tags) { if ($tag -match '^v(\d+)\.(\d+)\.(\d+)-dev') { $dev_tags += $tag } }
          Write-Host "[prepare-release] Found $($dev_tags.Count) dev tag(s): $($dev_tags -join ', ')" -ForegroundColor Cyan
          if ($dev_tags.Count -eq 0) {
            Write-Host "[prepare-release] No -dev tags found. Defaulting to 1.0.0" -ForegroundColor Yellow
            $new_version = "1.0.0"
          } else {
            $highest_version = @{ major = 0; minor = 0; patch = 0 }
            foreach ($tag in $dev_tags) {
              if ($tag -match '^v(\d+)\.(\d+)\.(\d+)-dev') {
                $major = [int]$matches[1]; $minor = [int]$matches[2]; $patch = [int]$matches[3]
                if ( ($major -gt $highest_version['major']) -or
                     ($major -eq $highest_version['major'] -and $minor -gt $highest_version['minor']) -or
                     ($major -eq $highest_version['major'] -and $minor -eq $highest_version['minor'] -and $patch -gt $highest_version['patch']) ) {
                  $highest_version['major'] = $major; $highest_version['minor'] = $minor; $highest_version['patch'] = $patch
                }
              }
            }
            # Check if production tag already exists, if so increment patch
            $base_version = "$($highest_version['major']).$($highest_version['minor']).$($highest_version['patch'])"
            $prod_tag = "v$base_version"
            if ($all_tags -contains $prod_tag) {
              Write-Host "[prepare-release] Production tag $prod_tag already exists, incrementing patch version" -ForegroundColor Yellow
              $highest_version['patch'] = $highest_version['patch'] + 1
            }
            $new_version = "$($highest_version['major']).$($highest_version['minor']).$($highest_version['patch'])"
            Write-Host "[prepare-release] Highest dev version resolved to: $new_version" -ForegroundColor Green
          }
          $tag = "v$new_version"
          Write-Host "[prepare-release] Final tag candidate: $tag" -ForegroundColor Cyan
          if (-not ($all_tags -contains $tag)) {
            git config user.email "csvtransferapp.bot@gmail.com"
            git config user.name "CSV Transfer App Bot"
            git tag $tag
            $maxRetries = 5; $retryCount = 0; $success = $false
            while (-not $success -and $retryCount -lt $maxRetries) {
              try {
                Write-Host "[prepare-release] Pushing tag $tag (attempt $($retryCount+1)/$maxRetries)" -ForegroundColor Cyan
                git push origin $tag
                $success = $true
              } catch {
                $retryCount++
                if ($retryCount -lt $maxRetries) {
                  $wait = [Math]::Pow(2, $retryCount) * 30
                  Write-Host "[prepare-release] Push failed, retrying in $wait seconds..." -ForegroundColor Yellow
                  Start-Sleep -Seconds $wait
                } else {
                  Write-Host "[prepare-release] Push failed after $maxRetries attempts" -ForegroundColor Red
                  throw $_
                }
              }
            }
          } else {
            Write-Host "[prepare-release] Tag $tag already exists, skipping push" -ForegroundColor Yellow
          }
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Use existing tag from ref (tag push)
        if: startsWith(github.ref, 'refs/tags/')
        id: set_tag_tagref
        shell: bash
        run: |
          echo "tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"

  build-release:
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      actions: read
      checks: read
      statuses: read
      pull-requests: read
      
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            artifact: linux-x64
          - os: windows-latest
            runtime: win-x64
            artifact: win-x64

    env:
      RELEASE_TAG: ${{ needs.prepare-release.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Restore dependencies
        run: dotnet restore CSVTransferApp.sln

      - name: Build solution
        run: dotnet build CSVTransferApp.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CSVTransferApp.sln --configuration Release --no-build --verbosity normal

      - name: Publish application
        shell: pwsh
        run: |
          dotnet publish src/CSVTransferApp.Console/CSVTransferApp.Console.csproj `
            --configuration Release `
            --runtime ${{ matrix.runtime }} `
            --self-contained true `
            --output ./publish/${{ matrix.artifact }} `
            /p:PublishSingleFile=true `
            /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Publish framework-dependent (DLL)
        shell: pwsh
        run: |
          dotnet publish src/CSVTransferApp.Console/CSVTransferApp.Console.csproj `
            --configuration Release `
            --output ./publish/${{ matrix.artifact }}-fx

      - name: Copy publish to deploy folder and create archives (Windows)
        if: ${{ matrix.runtime == 'win-x64' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "./deploy/windows/publish" -Force
          New-Item -ItemType Directory -Path "./deploy/windows/publish-fx" -Force
          New-Item -ItemType Directory -Path "./deploy/windows/archives" -Force
          Copy-Item -Path "./publish/win-x64/*" -Destination "./deploy/windows/publish/" -Recurse -Force
          Copy-Item -Path "./publish/win-x64-fx/*" -Destination "./deploy/windows/publish-fx/" -Recurse -Force -ErrorAction SilentlyContinue
          Compress-Archive -Path "./deploy/windows/publish/*" -DestinationPath "./deploy/windows/archives/CSVTransferApp-win-selfcontained.zip" -Force
          Compress-Archive -Path "./deploy/windows/publish-fx/*" -DestinationPath "./deploy/windows/archives/CSVTransferApp-win-fx.zip" -Force

      - name: Copy publish to deploy folder and create archives (Linux)
        if: ${{ matrix.runtime == 'linux-x64' }}
        run: |
          mkdir -p ./deploy/linux/publish ./deploy/linux/publish-fx ./deploy/linux/archives
          cp -r ./publish/linux-x64/* ./deploy/linux/publish/ || true
          cp -r ./publish/linux-x64-fx/* ./deploy/linux/publish-fx/ || true
          tar -czf ./deploy/linux/archives/CSVTransferApp-linux-selfcontained.tar.gz -C ./deploy/linux/publish .
          tar -czf ./deploy/linux/archives/CSVTransferApp-linux-fx.tar.gz -C ./deploy/linux/publish-fx .

      - name: Create release package (Windows)
        if: ${{ matrix.runtime == 'win-x64' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "./publish/${{ matrix.artifact }}" -Force
          Push-Location -Path "publish/${{ matrix.artifact }}"
          $out = "../CSVTransferApp-$env:RELEASE_TAG-${{ matrix.artifact }}.zip"
          Compress-Archive -Path * -DestinationPath $out -Force
          Pop-Location
          # Create a convenience copy with a stable name
          Copy-Item -Path "CSVTransferApp-${{ needs.prepare-release.outputs.tag }}-${{ matrix.artifact }}.zip" -Destination "publish/CSVTransferApp-latest-${{ matrix.artifact }}.zip" -Force

      - name: Create release package (Linux)
        if: ${{ matrix.runtime == 'linux-x64' }}
        run: |
          mkdir -p ./publish
          cd publish
          tar -czf CSVTransferApp-${RELEASE_TAG}-${{ matrix.artifact }}.tar.gz -C ${{ matrix.artifact }} .
          # Create a convenience copy with a stable name
          cp "CSVTransferApp-${RELEASE_TAG}-${{ matrix.artifact }}.tar.gz" "CSVTransferApp-latest-${{ matrix.artifact }}.tar.gz"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v5
        with:
          name: csvtransferapp-${{ matrix.artifact }}
          path: |
            publish/CSVTransferApp-${{ needs.prepare-release.outputs.tag }}-${{ matrix.artifact }}.*
            publish/CSVTransferApp-latest-${{ matrix.artifact }}.*
            deploy/windows/archives/**
            deploy/linux/archives/**

  create-release:
    needs: [build-release, prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Windows artifacts
        uses: actions/download-artifact@v6
        with:
          name: csvtransferapp-win-x64
          path: ./artifacts/win

      - name: Download Linux artifacts
        uses: actions/download-artifact@v6
        with:
          name: csvtransferapp-linux-x64
          path: ./artifacts/linux

      - name: Diagnostic - list release files and sizes
        shell: bash
        run: |
          echo "[create-release] Using tag: ${TAG}"
          echo "[create-release] Listing downloaded artifact directories:"
          find ./artifacts -maxdepth 3 -type d -print | sed 's/^/[dir] /'
          echo "[create-release] Listing files (path and size):"
          find ./artifacts -type f -printf "%p %k KB\n" | sed 's/^/[file] /'
          echo "[create-release] Validating expected files exist:"
          missing=0
          files=(
            "./artifacts/win/deploy/windows/archives/CSVTransferApp-win-selfcontained.zip"
            "./artifacts/win/deploy/windows/archives/CSVTransferApp-win-fx.zip"
            "./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-selfcontained.tar.gz"
            "./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-fx.tar.gz"
            "./artifacts/win/publish/CSVTransferApp-${TAG}-win-x64.zip"
            "./artifacts/win/publish/CSVTransferApp-latest-win-x64.zip"
            "./artifacts/linux/publish/CSVTransferApp-${TAG}-linux-x64.tar.gz"
            "./artifacts/linux/publish/CSVTransferApp-latest-linux-x64.tar.gz"
          )
          for f in "${files[@]}"; do
            if [ -f "$f" ]; then
              sz=$(stat -c%s "$f" 2>/dev/null || echo 0)
              echo "[create-release] OK: $f (${sz} bytes)"
            else
              echo "[create-release] MISSING: $f" >&2
              missing=$((missing+1))
            fi
          done
          if [ "$missing" -gt 0 ]; then
            echo "[create-release] ERROR: $missing expected file(s) missing. Failing job." >&2
            exit 1
          fi
        env:
          TAG: ${{ needs.prepare-release.outputs.tag }}

      - name: Create and push release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: "CSVTransferApp Release ${{ needs.prepare-release.outputs.tag }}"
          body: "Automated release for ${{ needs.prepare-release.outputs.tag }}"
          fail_on_unmatched_files: true
          files: |
            ./artifacts/win/deploy/windows/archives/CSVTransferApp-win-selfcontained.zip
            ./artifacts/win/deploy/windows/archives/CSVTransferApp-win-fx.zip
            ./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-selfcontained.tar.gz
            ./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-fx.tar.gz
            ./artifacts/win/publish/CSVTransferApp-${{ needs.prepare-release.outputs.tag }}-win-x64.zip
            ./artifacts/win/publish/CSVTransferApp-latest-win-x64.zip
            ./artifacts/linux/publish/CSVTransferApp-${{ needs.prepare-release.outputs.tag }}-linux-x64.tar.gz
            ./artifacts/linux/publish/CSVTransferApp-latest-linux-x64.tar.gz
