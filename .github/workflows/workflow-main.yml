name: PROD - Build & Release .NET CSV Transfer App

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
        - '*.cs'
        - '*.csproj'
        - '*.ps1'
        - '*.sln'
        - 'src/**'
        - 'tests/**'
        - 'config/**'
        - 'deploy/**'
        - 'publish/**'
        - 'scripts/**'
        - '*/docker-compose.local.yml'
        - '*/docker-compose.yml'
  push:
    tags:
      - 'v*'

# Security: Explicit permissions for CodeQL compliance
permissions:
  contents: write
  pull-requests: read
  actions: write

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      actions: read
      checks: read
      statuses: read
      pull-requests: read
      
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            artifact: linux-x64
          - os: windows-latest
            runtime: win-x64
            artifact: win-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Wait for CodeQL Analysis to Complete
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
        shell: pwsh
        run: |
          Write-Host "üïê Waiting for CodeQL analysis to complete..." -ForegroundColor Cyan
          $maxWaitMinutes = 20
          $checkInterval = 30
          $maxIterations = ($maxWaitMinutes * 60) / $checkInterval
          $iteration = 0
          $codeqlComplete = $false
          
          while ($iteration -lt $maxIterations -and -not $codeqlComplete) {
            try {
              Write-Host "üîç Checking CodeQL status (attempt $($iteration + 1)/$maxIterations)..." -ForegroundColor Yellow
              
              # Check if CodeQL workflow is complete
              $response = gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.name=="CodeQL" and .head_sha=="${{ github.event.pull_request.merge_commit_sha || github.sha }}") | .status'
              
              if ($response -eq "completed") {
                Write-Host "‚úÖ CodeQL analysis completed!" -ForegroundColor Green
                $codeqlComplete = $true
              } else {
                Write-Host "‚è≥ CodeQL still running, waiting $checkInterval seconds..." -ForegroundColor Yellow
                Start-Sleep -Seconds $checkInterval
                $iteration++
              }
            }
            catch {
              Write-Host "‚ö†Ô∏è Error checking CodeQL status: $($_.Exception.Message)" -ForegroundColor Yellow
              Write-Host "üìù Continuing with fallback wait..." -ForegroundColor Cyan
              break
            }
          }
          
          if (-not $codeqlComplete) {
            Write-Host "‚è∞ CodeQL wait timeout reached, proceeding..." -ForegroundColor Yellow
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Additional Safety Wait
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
        shell: pwsh
        run: |
          Write-Host "üõ°Ô∏è Additional safety wait for any remaining checks..." -ForegroundColor Cyan
          Start-Sleep -Seconds 60  # Additional 1 minute wait

      - name: Create and push production tag from latest dev version
        if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
        shell: pwsh
        run: |
          # Debug information
          Write-Host "üîç Debug Information:" -ForegroundColor Cyan
          Write-Host "  - Event: ${{ github.event_name }}" -ForegroundColor White
          Write-Host "  - PR Merged: ${{ github.event.pull_request.merged }}" -ForegroundColor White
          Write-Host "  - Base Ref: ${{ github.event.pull_request.base.ref }}" -ForegroundColor White
          Write-Host "  - Repository: ${{ github.repository }}" -ForegroundColor White
          
          # Wait for any pending CI checks before proceeding
          Write-Host "üïê Waiting for CI checks to complete..." -ForegroundColor Yellow
          Start-Sleep -Seconds 60  # Wait 1 minute for CI to settle
          
          git fetch --tags
          $all_tags = git tag --list
          $dev_tags = @()
          foreach ($tag in $all_tags) {
            if ($tag -match '^v(\d+)\.(\d+)\.(\d+)-dev') {
              $dev_tags += $tag
            }
          }
          if ($dev_tags.Count -eq 0) {
            $new_version = "1.0.0"
          } else {
            $highest_version = @{major=0; minor=0; patch=0}
            foreach ($tag in $dev_tags) {
              if ($tag -match '^v(\d+)\.(\d+)\.(\d+)-dev') {
                $major = [int]$matches[1]
                $minor = [int]$matches[2]
                $patch = [int]$matches[3]
                if (($major -gt $highest_version.major) -or
                  ($major -eq $highest_version.major -and $minor -gt $highest_version.minor) -or
                  ($major -eq $highest_version.major -and $minor -eq $highest_version.minor -and $patch -gt $highest_version.patch)) {
                  $highest_version.major = $major
                  $highest_version.minor = $minor
                  $highest_version.patch = $patch
                }
              }
            }
            $new_version = "$($highest_version.major).$($highest_version.minor).$($highest_version.patch)"
          }
          $tag = "v$new_version"
          if ($all_tags -contains $tag) {
            Write-Output "Tag $tag already exists, skipping."
            exit 0
          }
          git config user.email "csvtransferapp.bot@gmail.com"
          git config user.name "CSV Transfer App Bot"
          git tag $tag
          
          # Check if we can push (status checks passed)
          Write-Host "üîç Checking repository status before push..." -ForegroundColor Cyan
          
          # Retry logic for push with exponential backoff
          $maxRetries = 5
          $retryCount = 0
          $success = $false
          
          while (-not $success -and $retryCount -lt $maxRetries) {
            try {
              Write-Host "üöÄ Attempting to push tag $tag (attempt $($retryCount + 1)/$maxRetries)..." -ForegroundColor Cyan
              git push origin $tag
              $success = $true
              Write-Host "‚úÖ Tag pushed successfully!" -ForegroundColor Green
            }
            catch {
              $retryCount++
              if ($retryCount -lt $maxRetries) {
                $waitTime = [Math]::Pow(2, $retryCount) * 30  # Exponential backoff: 30s, 60s, 120s, 240s
                Write-Host "‚ö†Ô∏è Push failed. Waiting $waitTime seconds before retry..." -ForegroundColor Yellow
                Start-Sleep -Seconds $waitTime
              } else {
                Write-Host "‚ùå Failed to push tag after $maxRetries attempts" -ForegroundColor Red
                throw $_
              }
            }
          }

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}

      - name: Restore dependencies
        run: dotnet restore CSVTransferApp.sln

      - name: Build solution
        run: dotnet build CSVTransferApp.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test CSVTransferApp.sln --configuration Release --no-build --verbosity normal

      - name: Publish application
        shell: pwsh
        run: |
          dotnet publish src/CSVTransferApp.Console/CSVTransferApp.Console.csproj `
            --configuration Release `
            --runtime ${{ matrix.runtime }} `
            --self-contained true `
            --output ./publish/${{ matrix.artifact }} `
            /p:PublishSingleFile=true `
            /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Publish framework-dependent (DLL)
        shell: pwsh
        run: |
          dotnet publish src/CSVTransferApp.Console/CSVTransferApp.Console.csproj `
            --configuration Release `
            --output ./publish/${{ matrix.artifact }}-fx

      - name: Copy publish to deploy folder and create archives (Windows)
        if: ${{ matrix.runtime == 'win-x64' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "./deploy/windows/publish" -Force
          New-Item -ItemType Directory -Path "./deploy/windows/publish-fx" -Force
          New-Item -ItemType Directory -Path "./deploy/windows/archives" -Force
          Copy-Item -Path "./publish/win-x64/*" -Destination "./deploy/windows/publish/" -Recurse -Force
          Copy-Item -Path "./publish/win-x64-fx/*" -Destination "./deploy/windows/publish-fx/" -Recurse -Force -ErrorAction SilentlyContinue
          Compress-Archive -Path "./deploy/windows/publish/*" -DestinationPath "./deploy/windows/archives/CSVTransferApp-win-selfcontained.zip" -Force
          Compress-Archive -Path "./deploy/windows/publish-fx/*" -DestinationPath "./deploy/windows/archives/CSVTransferApp-win-fx.zip" -Force

      - name: Copy publish to deploy folder and create archives (Linux)
        if: ${{ matrix.runtime == 'linux-x64' }}
        run: |
          mkdir -p ./deploy/linux/publish ./deploy/linux/publish-fx ./deploy/linux/archives
          cp -r ./publish/linux-x64/* ./deploy/linux/publish/ || true
          cp -r ./publish/linux-x64-fx/* ./deploy/linux/publish-fx/ || true
          tar -czf ./deploy/linux/archives/CSVTransferApp-linux-selfcontained.tar.gz -C ./deploy/linux/publish .
          tar -czf ./deploy/linux/archives/CSVTransferApp-linux-fx.tar.gz -C ./deploy/linux/publish-fx .

      - name: Create release package (Windows)
        if: ${{ matrix.runtime == 'win-x64' }}
        shell: pwsh
        run: |
          Push-Location -Path "publish/${{ matrix.artifact }}"
          $out = "../../CSVTransferApp-${{ github.ref_name }}-${{ matrix.artifact }}.zip"
          Compress-Archive -Path * -DestinationPath $out -Force
          Pop-Location

      - name: Create release package (Linux)
        if: ${{ matrix.runtime == 'linux-x64' }}
        run: |
          mkdir -p ./publish/${{ matrix.artifact }}
          tar -czf CSVTransferApp-${{ github.ref_name }}-${{ matrix.artifact }}.tar.gz -C publish/${{ matrix.artifact }} .

      - name: Upload release artifacts
        uses: actions/upload-artifact@v5
        with:
          name: csvtransferapp-${{ matrix.artifact }}
          path: |
            CSVTransferApp-${{ github.ref_name }}-${{ matrix.artifact }}.*
            deploy/windows/archives/**
            deploy/linux/archives/**

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download Windows artifacts
        uses: actions/download-artifact@v6
        with:
          name: csvtransferapp-win-x64
          path: ./artifacts/win

      - name: Download Linux artifacts
        uses: actions/download-artifact@v6
        with:
          name: csvtransferapp-linux-x64
          path: ./artifacts/linux

      - name: Create and push release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: "CSVTransferApp Release ${{ github.ref_name }}"
          body: "Automated release for ${{ github.ref_name }}"
          files: |
            ./artifacts/win/deploy/windows/archives/CSVTransferApp-win-selfcontained.zip
            ./artifacts/win/deploy/windows/archives/CSVTransferApp-win-fx.zip
            ./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-selfcontained.tar.gz
            ./artifacts/linux/deploy/linux/archives/CSVTransferApp-linux-fx.tar.gz
